const fs = require('fs');
const path = require('path');

/**
 * Script ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t file videos.json
 * Ch·∫°y: node video/index.js
 */

// C·∫•u h√¨nh
const VIDEO_FOLDER = './video';
const JSON_FILE = './video/videos.json';
const SUPPORTED_FORMATS = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm'];

/**
 * L·∫•y danh s√°ch file video t·ª´ folder
 */
function getVideoFiles() {
    try {
        const files = fs.readdirSync(VIDEO_FOLDER);
        return files.filter(file => {
            const ext = path.extname(file).toLowerCase();
            return SUPPORTED_FORMATS.includes(ext);
        });
    } catch (error) {
        console.error('‚ùå L·ªói khi ƒë·ªçc folder video:', error.message);
        return [];
    }
}

/**
 * T·∫°o c·∫•u tr√∫c JSON m·ªõi
 */
function createVideoJSON(videoFiles) {
    return {
        videos: videoFiles,
        metadata: {
            totalVideos: videoFiles.length,
            lastUpdated: new Date().toISOString(),
            version: "1.0",
            description: "Danh s√°ch video c√≥ s·∫µn trong Multi Video Player",
            supportedFormats: SUPPORTED_FORMATS
        }
    };
}

/**
 * C·∫≠p nh·∫≠t file JSON
 */
function updateVideoJSON() {
    console.log('üîç ƒêang scan folder video...');
    
    const videoFiles = getVideoFiles();
    
    if (videoFiles.length === 0) {
        console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file video n√†o trong folder video/');
        console.log('üìù C√°c ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£:', SUPPORTED_FORMATS.join(', '));
        return;
    }
    
    console.log(`üìπ T√¨m th·∫•y ${videoFiles.length} file video:`);
    videoFiles.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file}`);
    });
    
    const jsonData = createVideoJSON(videoFiles);
    
    try {
        fs.writeFileSync(JSON_FILE, JSON.stringify(jsonData, null, 2), 'utf8');
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t file videos.json th√†nh c√¥ng!');
        console.log(`üìä Th·ªëng k√™: ${videoFiles.length} video`);
        console.log(`üïí C·∫≠p nh·∫≠t l√∫c: ${new Date().toLocaleString('vi-VN')}`);
    } catch (error) {
        console.error('‚ùå L·ªói khi ghi file JSON:', error.message);
    }
}

/**
 * Ki·ªÉm tra file JSON hi·ªán t·∫°i
 */
function checkCurrentJSON() {
    try {
        if (fs.existsSync(JSON_FILE)) {
            const currentData = JSON.parse(fs.readFileSync(JSON_FILE, 'utf8'));
            console.log('üìã Th√¥ng tin file JSON hi·ªán t·∫°i:');
            console.log(`   - T·ªïng video: ${currentData.metadata?.totalVideos || 0}`);
            console.log(`   - C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${currentData.metadata?.lastUpdated || 'Kh√¥ng c√≥'}`);
        } else {
            console.log('üìã File videos.json ch∆∞a t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi');
        }
    } catch (error) {
        console.log('üìã File videos.json c√≥ l·ªói, s·∫Ω t·∫°o l·∫°i');
    }
}

/**
 * Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
 */
function showHelp() {
    console.log('\nüìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:');
    console.log('1. ƒê·∫∑t file video v√†o folder video/');
    console.log('2. Ch·∫°y l·ªánh: node video/index.js');
    console.log('3. File videos.json s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');
    console.log('4. Refresh trang web ƒë·ªÉ load danh s√°ch video m·ªõi');
    console.log('\nüìù C√°c ƒë·ªãnh d·∫°ng video ƒë∆∞·ª£c h·ªó tr·ª£:');
    SUPPORTED_FORMATS.forEach(format => console.log(`   - ${format}`));
}

/**
 * Main function
 */
function main() {
    console.log('üé¨ Multi Video Player - Video Scanner');
    console.log('=====================================\n');
    
    // Ki·ªÉm tra folder video c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(VIDEO_FOLDER)) {
        console.error('‚ùå Folder video/ kh√¥ng t·ªìn t·∫°i!');
        console.log('üí° T·∫°o folder video/ v√† ƒë·∫∑t video v√†o ƒë√≥');
        return;
    }
    
    // Ki·ªÉm tra file JSON hi·ªán t·∫°i
    checkCurrentJSON();
    console.log('');
    
    // C·∫≠p nh·∫≠t file JSON
    updateVideoJSON();
    console.log('');
    
    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    showHelp();
}

// Ch·∫°y script
if (require.main === module) {
    main();
}

module.exports = {
    getVideoFiles,
    createVideoJSON,
    updateVideoJSON
}; 